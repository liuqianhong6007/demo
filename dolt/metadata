{"args":null,"command":"dolt init","flags":null,"options":[{"value":"name","desc":"The name used in commits to this repo. If not provided will be taken from {{.EmphasisLeft}}user.name{{.EmphasisRight}} in the global config."},{"value":"email","desc":"The email address used. If not provided will be taken from {{.EmphasisLeft}}user.email{{.EmphasisRight}} in the global config."},{"value":"date","desc":"Specify the date used in the initial commit. If not specified the current system time is used."}]}
{"args":null,"command":"dolt status","flags":null,"options":null}
{"args":[{"value":"table","desc":"Working table(s) to add to the list tables staged to be committed. The abbreviation '.' can be used to add all tables."}],"command":"dolt add","flags":[{"value":"all","desc":"Stages any and all changes (adds, deletes, and modifications)."}],"options":null}
{"args":null,"command":"dolt reset","flags":[{"value":"hard","desc":"Resets the working tables and staged tables. Any changes to tracked tables in the working tree since {{.LessThan}}commit{{.GreaterThan}} are discarded."},{"value":"soft","desc":"Does not touch the working tables, but removes all tables staged to be committed."}],"options":null}
{"args":null,"command":"dolt commit","flags":[{"value":"allow-empty","desc":"Allow recording a commit that has the exact same data as its sole parent. This is usually a mistake, so it is disabled by default. This option bypasses that safety."},{"value":"force","desc":"Ignores any foreign key warnings and proceeds with the commit."},{"value":"all","desc":"Adds all edited files in working to staged."}],"options":[{"value":"message","desc":"Use the given {{.LessThan}}msg{{.GreaterThan}} as the commit message."},{"value":"date","desc":"Specify the date used in the commit. If not specified the current system time is used."},{"value":"author","desc":"Specify an explicit author using the standard A U Thor \u003cauthor@example.com\u003e format."}]}
{"args":[{"value":"commit","desc":"Commit to run read only queries against."}],"command":"dolt sql","flags":[{"value":"list-saved","desc":"Lists all saved queries"},{"value":"batch","desc":"batch mode, to run more than one query with --query, separated by ';'. Piping input to sql with no arguments also uses batch mode"}],"options":[{"value":"query","desc":"Runs a single query and exits"},{"value":"result-format","desc":"How to format result output. Valid values are tabular, csv, json. Defaults to tabular. "},{"value":"save","desc":"Used with --query, save the query to the query catalog with the name provided. Saved queries can be examined in the dolt_query_catalog system table."},{"value":"execute","desc":"Executes a saved query with the given name"},{"value":"message","desc":"Used with --query and --save, saves the query with the descriptive message given. See also --name"},{"value":"multi-db-dir","desc":"Defines a directory whose subdirectories should all be dolt data repositories accessible as independent databases within "}]}
{"args":null,"command":"dolt sql-server","flags":[{"value":"readonly","desc":"Disables modification of the database"},{"value":"no-auto-commit","desc":"When provided sessions will not automatically commit their changes to the working set. Anything not manually committed will be lost."}],"options":[{"value":"config","desc":"When provided configuration is taken from the yaml config file and all command line parameters are ignored."},{"value":"host","desc":"Defines the host address that the server will run on (default `localhost`)"},{"value":"port","desc":"Defines the port that the server will run on (default `3306`)"},{"value":"user","desc":"Defines the server user (default `root`)"},{"value":"password","desc":"Defines the server password (default ``)"},{"value":"timeout","desc":"Defines the timeout, in seconds, used for connections\nA value of `0` represents an infinite timeout (default `28800000`)"},{"value":"loglevel","desc":"Defines the level of logging provided\nOptions are: `trace', `debug`, `info`, `warning`, `error`, `fatal` (default `info`)"},{"value":"multi-db-dir","desc":"Defines a directory whose subdirectories should all be dolt data repositories accessible as independent databases."},{"value":"query-parallelism","desc":"Set the number of go routines spawned to handle each query (default `2`)"},{"value":"max-connections","desc":"Set the number of connections handled by the server (default `1`)"}]}
{"args":null,"command":"dolt log","flags":null,"options":[{"value":"number","desc":"Limit the number of commits to output"}]}
{"args":null,"command":"dolt diff","flags":[{"value":"data","desc":"Show only the data changes, do not show the schema changes (Both shown by default)."},{"value":"schema","desc":"Show only the schema changes, do not show the data changes (Both shown by default)."},{"value":"summary","desc":"Show summary of data changes"},{"value":"cached","desc":"Show only the unstaged data changes."}],"options":[{"value":"result-format","desc":"How to format diff output. Valid values are tabular \u0026 sql. Defaults to tabular. "},{"value":"where","desc":"filters columns based on values in the diff.  See {{.EmphasisLeft}}dolt diff --help{{.EmphasisRight}} for details."},{"value":"limit","desc":"limits to the first N diffs."}]}
{"args":null,"command":"dolt blame","flags":null,"options":null}
{"args":null,"command":"dolt merge","flags":[{"value":"no-ff","desc":"Create a merge commit even when the merge resolves as a fast-forward."},{"value":"squash","desc":"Merges changes to the working set without updating the commit history"},{"value":"abort","desc":"Abort the current conflict resolution process, and try to reconstruct the pre-merge state.\n\nIf there were uncommitted working set changes present when the merge started, {{.EmphasisLeft}}dolt merge --abort{{.EmphasisRight}} will be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes before running dolt merge.\n"}],"options":[{"value":"message","desc":"Use the given {{.LessThan}}msg{{.GreaterThan}} as the commit message."}]}
{"args":[{"value":"start-point","desc":"A commit that a new branch should point at."}],"command":"dolt branch","flags":[{"value":"list","desc":"List branches"},{"value":"force","desc":"Reset {{.LessThan}}branchname{{.GreaterThan}} to {{.LessThan}}startpoint{{.GreaterThan}}, even if {{.LessThan}}branchname{{.GreaterThan}} exists already. Without {{.EmphasisLeft}}-f{{.EmphasisRight}}, {{.EmphasisLeft}}dolt branch{{.EmphasisRight}} refuses to change an existing branch. In combination with {{.EmphasisLeft}}-d{{.EmphasisRight}} (or {{.EmphasisLeft}}--delete{{.EmphasisRight}}), allow deleting the branch irrespective of its merged status. In combination with -m (or {{.EmphasisLeft}}--move{{.EmphasisRight}}), allow renaming the branch even if the new branch name already exists, the same applies for {{.EmphasisLeft}}-c{{.EmphasisRight}} (or {{.EmphasisLeft}}--copy{{.EmphasisRight}})."},{"value":"copy","desc":"Create a copy of a branch."},{"value":"move","desc":"Move/rename a branch"},{"value":"delete","desc":"Delete a branch. The branch must be fully merged in its upstream branch."},{"value":"D","desc":"Shortcut for {{.EmphasisLeft}}--delete --force{{.EmphasisRight}}."},{"value":"verbose","desc":"When in list mode, show the hash and commit subject line for each head"},{"value":"all","desc":"When in list mode, shows remote tracked branches"},{"value":"remote","desc":"When in list mode, show only remote tracked branches. When with -d, delete a remote tracking branch."},{"value":"show-current","desc":"Print the name of the current branch"}],"options":null}
{"args":[{"value":"ref","desc":"A commit ref that the tag should point at."}],"command":"dolt tag","flags":[{"value":"verbose","desc":"list tags along with their metadata."},{"value":"delete","desc":"Delete a tag."}],"options":[{"value":"message","desc":"Use the given {{.LessThan}}msg{{.GreaterThan}} as the tag message."}]}
{"args":null,"command":"dolt checkout","flags":null,"options":[{"value":"b","desc":"Create a new branch named {{.LessThan}}new_branch{{.GreaterThan}} and start it at {{.LessThan}}start_point{{.GreaterThan}}."}]}
{"args":[{"value":"region","desc":"cloud provider region associated with this remote."},{"value":"creds-type","desc":"credential type.  Valid options are role, env, and file.  See the help section for additional details."},{"value":"profile","desc":"AWS profile to use."}],"command":"dolt remote","flags":[{"value":"verbose","desc":"When printing the list of remotes adds additional details."}],"options":[{"value":"aws-region","desc":""},{"value":"aws-creds-type","desc":""},{"value":"aws-creds-file","desc":"AWS credentials file"},{"value":"aws-creds-profile","desc":"AWS profile to use"}]}
{"args":null,"command":"dolt push","flags":[{"value":"set-upstream","desc":"For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less {{.EmphasisLeft}}dolt pull{{.EmphasisRight}} and other commands."},{"value":"force","desc":"Update the remote with local history, overwriting any conflicting history in the remote."}],"options":null}
{"args":null,"command":"dolt pull","flags":[{"value":"squash","desc":"Merges changes to the working set without updating the commit history"}],"options":null}
{"args":null,"command":"dolt fetch","flags":[{"value":"force","desc":"Update refs to remote branches with the current state of the remote, overwriting any conflicting history."}],"options":null}
{"args":null,"command":"dolt clone","flags":null,"options":[{"value":"remote","desc":"Name of the remote to be added. Default will be 'origin'."},{"value":"branch","desc":"The branch to be cloned.  If not specified all branches will be cloned."},{"value":"aws-region","desc":""},{"value":"aws-creds-type","desc":""},{"value":"aws-creds-file","desc":"AWS credentials file."},{"value":"aws-creds-profile","desc":"AWS profile to use."}]}
{"args":null,"command":"dolt creds new","flags":null,"options":null}
{"args":null,"command":"dolt creds rm","flags":null,"options":null}
{"args":null,"command":"dolt creds ls","flags":[{"value":"verbose","desc":"Verbose output, including key id."}],"options":null}
{"args":null,"command":"dolt creds check","flags":null,"options":[{"value":"endpoint","desc":"API endpoint, otherwise taken from config."},{"value":"creds","desc":"Public Key ID or Public Key for credentials, otherwise taken from config."}]}
{"args":null,"command":"dolt creds use","flags":null,"options":null}
{"args":[{"value":"jwk_filename","desc":"The JWK file. If omitted, import operates on stdin."}],"command":"dolt creds import","flags":[{"value":"no-profile","desc":"If provided, no attempt will be made to contact doltremoteapi and update user.name and user.email."}],"options":null}
{"args":[{"value":"creds","desc":"A specific credential to use for login."}],"command":"dolt login","flags":null,"options":null}
{"args":null,"command":"dolt config","flags":[{"value":"global","desc":"Use global config."},{"value":"local","desc":"Use repository local config."},{"value":"add","desc":"Set the value of one or more config parameters"},{"value":"list","desc":"List the values of all config parameters."},{"value":"get","desc":"Get the value of one or more config parameters."},{"value":"unset","desc":"Unset the value of one or more config paramaters."}],"options":null}
{"args":null,"command":"dolt ls","flags":[{"value":"verbose","desc":"show the hash of the table"},{"value":"system","desc":"show system tables"},{"value":"all","desc":"show system tables"}],"options":null}
{"args":[{"value":"table","desc":"table whose schema is being exported."},{"value":"file","desc":"the file that the schema will be written to."}],"command":"dolt schema export","flags":null,"options":null}
{"args":[{"value":"table","desc":"Name of the table to be created."},{"value":"file","desc":"The file being used to infer the schema."}],"command":"dolt schema import","flags":[{"value":"create","desc":"Create a table with the schema inferred from the {{.LessThan}}file{{.GreaterThan}} provided."},{"value":"update","desc":"Update a table to match the inferred schema of the {{.LessThan}}file{{.GreaterThan}} provided"},{"value":"replace","desc":"Replace a table with a new schema that has the inferred schema from the {{.LessThan}}file{{.GreaterThan}} provided. All previous data will be lost."},{"value":"dry-run","desc":"Print the sql statement that would be run if executed without the flag."},{"value":"keep-types","desc":"When a column already exists in the table, and it's also in the {{.LessThan}}file{{.GreaterThan}} provided, use the type from the table."}],"options":[{"value":"file-type","desc":"Explicitly define the type of the file if it can't be inferred from the file extension."},{"value":"pks","desc":"List of columns used as the primary key cols.  Order of the columns will determine sort order."},{"value":"map","desc":"A file that can map a column name in {{.LessThan}}file{{.GreaterThan}} to a new value."},{"value":"float-threshold","desc":"Minimum value at which the fractional component of a value must exceed in order to be considered a float."},{"value":"delim","desc":"Specify a delimiter for a csv style file with a non-comma delimiter."}]}
{"args":[{"value":"table","desc":"table(s) whose schema is being displayed."},{"value":"commit","desc":"commit at which point the schema will be displayed."}],"command":"dolt schema show","flags":null,"options":null}
{"args":[{"value":"table","desc":"table(s) whose tags will be displayed."}],"command":"dolt schema tags","flags":null,"options":[{"value":"result-format","desc":"How to format result output. Valid values are tabular, csv, json. Defaults to tabular."}]}
{"args":[{"value":"table","desc":"The new or existing table being imported to."},{"value":"file","desc":"The file being imported. Supported file types are csv, psv, and nbf."}],"command":"dolt table import","flags":[{"value":"create-table","desc":"Create a new table, or overwrite an existing table (with the -f flag) from the imported data."},{"value":"update-table","desc":"Update an existing table with the imported data."},{"value":"force","desc":"If a create operation is being executed, data already exists in the destination, the force flag will allow the target to be overwritten."},{"value":"replace-table","desc":"Replace existing table with imported data while preserving the original schema."},{"value":"continue","desc":"Continue importing when row import errors are encountered."},{"value":"no-gc","desc":"Don't run garbage collection automatically as part of the import."}],"options":[{"value":"schema","desc":"The schema for the output data."},{"value":"map","desc":"A file that lays out how fields should be mapped from input data to output data."},{"value":"pk","desc":"Explicitly define the name of the field in the schema which should be used as the primary key."},{"value":"file-type","desc":"Explicitly define the type of the file if it can't be inferred from the file extension."},{"value":"delim","desc":"Specify a delimeter for a csv style file with a non-comma delimiter."}]}
{"args":[{"value":"table","desc":"The table being exported."},{"value":"file","desc":"The file being output to."}],"command":"dolt table export","flags":[{"value":"force","desc":"If data already exists in the destination, the force flag will allow the target to be overwritten."},{"value":"continue","desc":"Continue exporting when row export errors are encountered."}],"options":[{"value":"schema","desc":"The schema for the output data."},{"value":"map","desc":"A file that lays out how fields should be mapped from input data to output data."},{"value":"pk","desc":"Explicitly define the name of the field in the schema which should be used as the primary key."},{"value":"file-type","desc":"Explicitly define the type of the file if it can't be inferred from the file extension."}]}
{"args":[{"value":"table","desc":"The table to remove"}],"command":"dolt table rm","flags":null,"options":null}
{"args":[{"value":"oldtable","desc":"The table being moved."},{"value":"newtable","desc":"The new name of the table"}],"command":"dolt table mv","flags":[{"value":"force","desc":"If data already exists in the destination, the force flag will allow the target to be overwritten."}],"options":null}
{"args":[{"value":"oldtable","desc":"The table being copied."},{"value":"newtable","desc":"The destination where the table is being copied to."}],"command":"dolt table cp","flags":[{"value":"force","desc":"If data already exists in the destination, the force flag will allow the target to be overwritten."}],"options":null}
{"args":[{"value":"table","desc":"List of tables to be printed. '.' can be used to print conflicts for all tables."}],"command":"dolt conflicts cat","flags":null,"options":null}
{"args":[{"value":"table","desc":"List of tables to be printed. When in auto-resolve mode, '.' can be used to resolve all tables."},{"value":"key","desc":"key(s) of rows within a table whose conflicts have been resolved"}],"command":"dolt conflicts resolve","flags":[{"value":"ours","desc":"For all conflicts, take the version from our branch and resolve the conflict"},{"value":"theirs","desc":"For all conflicts, take the version from their branch and resolve the conflict"}],"options":null}
{"args":[{"value":"remote-repo","desc":"Remote repository to retrieve data from"},{"value":"commit","desc":"Branch or commit hash representing a point in time to retrieve tables from"},{"value":"table","desc":" Optional tables to retrieve.  If omitted, all tables are retrieved."}],"command":"dolt read-tables","flags":null,"options":[{"value":"dir","desc":"directory to create and put retrieved table data."}]}
{"args":null,"command":"dolt gc","flags":[{"value":"shallow","desc":"perform a fast, but incomplete garbage collection pass"}],"options":null}
{"args":null,"command":"dolt filter-branch","flags":[{"value":"all","desc":"filter all branches"}],"options":null}
{"args":null,"command":"dolt merge-base","flags":null,"options":null}
